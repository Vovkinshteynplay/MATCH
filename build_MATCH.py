from pathlib import Path
import sys, subprocess, shutil, os, platform

ROOT  = Path(__file__).resolve().parent
DIST  = ROOT / "dist"
BUILD = ROOT / "build"
COMMON = ROOT / "assets_common"
STAGE  = ROOT / "assets_stage"

def run(cmd):
    print(">>", " ".join(map(str, cmd)), flush=True)
    subprocess.check_call(cmd)

def main():
    # —á–∏—Å—Ç–∏–º –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞
    shutil.rmtree(DIST,  ignore_errors=True)
    shutil.rmtree(BUILD, ignore_errors=True)
    shutil.rmtree(STAGE, ignore_errors=True)
    DIST.mkdir(parents=True, exist_ok=True)
    BUILD.mkdir(parents=True, exist_ok=True)

    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º STAGE –∏–∑ COMMON
    if COMMON.is_dir():
        shutil.copytree(COMMON, STAGE)
    else:
        raise SystemExit("assets_common/ not found; cannot build")

    sep = ";" if platform.system() == "Windows" else ":"

    cmd = [
        sys.executable, "-m", "PyInstaller",
        str(ROOT / "MATCH.py"),
        "--onedir",
        "--name", "MATCH",
        "--windowed",
        "--add-data", f"{STAGE}{sep}assets",
        "--distpath", str(DIST),
        "--workpath", str(BUILD),
        "--specpath", str(BUILD),
        "--log-level", "DEBUG",
    ]
    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–¥ Windows/macOS:
    win_ico = ROOT / "assets_win" / "icon.ico"
    mac_icns = ROOT / "assets_mac" / "icon.icns"
    if platform.system() == "Windows" and win_ico.exists():
        cmd += ["--icon", str(win_ico)]
    if platform.system() == "Darwin" and mac_icns.exists():
        cmd += ["--icon", str(mac_icns)]

    # –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–µ–¥–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤ STAGE
    print("[diagnostics] STAGE exists:", STAGE.exists(), "count:", sum(1 for _ in STAGE.rglob('*')))
    run(cmd)

    # –û–ø—Ä–µ–¥–µ–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –≤ dist —Ç–∞–∫ –∂–µ, –∫–∞–∫ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—ë—à—å –≤ PyInstaller
app_name = "MATCH"  # –∏–ª–∏ –≤–æ–∑—å–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: getattr(args, "name", "MATCH")
app_dir = DIST / app_name

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
print(f"[build] app_dir: {app_dir} exists={app_dir.exists()}")
if not app_dir.exists():
    # –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤–æ–æ–±—â–µ –ª–µ–∂–∏—Ç –≤ dist (–ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –µ—Å–ª–∏ –∏–º—è –¥—Ä—É–≥–æ–µ)
    print("[build] dist listing:", list(DIST.glob("*")))
    raise SystemExit(f"Expected dist/{app_name} not found. PyInstaller may have failed or name differs.")

# === Linux-only readme ===
if platform.system() == "Linux":
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å–±–æ—Ä–∫–∏)
    app_dir.mkdir(parents=True, exist_ok=True)

    try:
        version_str = version  # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞–¥–∞–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é version
    except NameError:
        version_str = "dev"

    readme_text = f"""\
==============================
 MATCH ‚Äî Minimalist Puzzle Game
==============================

‚ñ∂Ô∏è  HOW TO RUN (Linux)
------------------------------
1. Extract the archive anywhere you like.
2. Make the game executable (if needed):
   chmod +x MATCH
3. Run the game:
   ./MATCH

üí°  OPTIONAL ‚Äî Add to Applications Menu
---------------------------------------
To add MATCH to your Linux applications menu or WSL Start Menu:
   mkdir -p ~/.local/share/applications
   cp match.desktop ~/.local/share/applications/
   chmod +x ~/.local/share/applications/match.desktop
Then restart your session or WSL.

üéß  SOUND
---------------------------------------
On native Linux distributions sound works automatically.
If you are using WSL2 with WSLg and have no sound, add this to ~/.bashrc:
   export PULSE_SERVER=unix:/mnt/wslg/PulseServer
   export SDL_AUDIODRIVER=pulse
Then restart WSL.

üêß  ITCH.IO LAUNCHER
---------------------------------------
When using the itch.io app, just click ‚ÄúLaunch‚Äù ‚Äî it will automatically
set permissions and run the correct binary.
No manual configuration is required.

üïπ  ABOUT
---------------------------------------
MATCH is a minimalist competitive puzzle game.
Version: {version_str}
Developer: Vovkinshteynplay
"""

    readme_path = app_dir / "readme.txt"
    readme_path.write_text(readme_text, encoding="utf-8")
    print(f"[build] (Linux) wrote {readme_path}")
    
    out = DIST / "MATCH"
    print(f"[build] output dir: {out}  exists={out.exists()}", flush=True)
    if not out.exists():
        raise SystemExit("dist/MATCH not produced")

if __name__ == "__main__":
    main()
