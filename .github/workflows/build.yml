name: Build (Win/Linux/macOS) → commit win/, linux/, mac/ to `builds` branch

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths-ignore:
      - "win/**"
      - "linux/**"
      - "mac/**"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.channel }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            channel: win
          - os: ubuntu-latest
            channel: linux
          - os: macos-14
            channel: mac
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve version
        id: ver
        shell: bash
        run: |
          V="${GITHUB_REF_NAME:-$GITHUB_SHA}"
          V="${V#refs/tags/}"
          V="${V#v}"
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install pygame pyinstaller
          # Если на Windows иконка у тебя PNG, раскомментируй Pillow для автоконвертации:
          # if [ "$RUNNER_OS" = "Windows" ]; then pip install pillow; fi

      - name: Show tree (pre-build)
        shell: bash
        run: |
          pwd
          ls -la
          ls -la assets_common || true
          ls -la assets_win || true
          ls -la assets_mac || true
          ls -la assets_linux || true

      - name: Build via build_MATCH.py
        shell: bash
        run: |
          python build_MATCH.py --name MATCH --version "${{ steps.ver.outputs.version }}" --clean

      - name: Sanity print
        shell: bash
        run: |
          echo "Built on $RUNNER_OS"
          [ -d dist ] && ls -la dist || echo "no dist"
          [ -d "dist/MATCH" ] && ls -la "dist/MATCH" || echo "no dist/MATCH"

      - name: Ensure dist/MATCH exists
        shell: bash
        run: |
          if [ ! -d "dist/MATCH" ]; then
            echo "::error ::dist/MATCH not found. See build logs above."
            exit 1
          fi

      # Linux: добавляем portable .desktop
      - name: Create .desktop (Linux only)
        if: matrix.channel == 'linux'
        shell: bash
        run: |
          cat > dist/MATCH/match.desktop <<'DESKTOP'
          [Desktop Entry]
          Type=Application
          Name=MATCH
          Comment=Minimalist Competitive Puzzle
          # Portable запуск из любой папки: %k — путь к этому .desktop
          Exec=sh -c 'cd "$(dirname "$1")" && exec ./MATCH' dummy %k
          Icon=assets/icon.png
          Terminal=false
          Categories=Game;Puzzle;
          StartupNotify=false
          DESKTOP
          chmod +x dist/MATCH/match.desktop

      # Исполняемые биты для Linux/macOS
      - name: Ensure exec bits (Linux & macOS)
        if: matrix.channel != 'win'
        shell: bash
        run: |
          # Linux бинарь
          [ -f dist/MATCH/MATCH ] && chmod +x dist/MATCH/MATCH || true
          # macOS бинарь внутри .app
          [ -f dist/MATCH/MATCH.app/Contents/MacOS/MATCH ] && chmod +x dist/MATCH/MATCH.app/Contents/MacOS/MATCH || true

      # macOS: тюним Info.plist (имя, версия, категория); иконка .icns — если есть
      - name: Patch Info.plist (macOS only)
        if: matrix.channel == 'mac'
        shell: bash
        run: |
          APP="dist/MATCH/MATCH.app"
          PLIST="$APP/Contents/Info.plist"
          if [ -f "$PLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleName MATCH" "$PLIST" || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName MATCH" "$PLIST" || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.ver.outputs.version }}" "$PLIST" || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ steps.ver.outputs.version }}" "$PLIST" || true
            /usr/libexec/PlistBuddy -c "Set :LSApplicationCategoryType public.app-category.games" "$PLIST" || true
            # Иконка, если есть
            if [ -f "$APP/Contents/Resources/icon.icns" ]; then
              /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile icon" "$PLIST" || true
            fi
            echo "Info.plist patched:"
            /usr/libexec/PlistBuddy -c "Print" "$PLIST" | head -n 60
          else
            echo "No Info.plist found at $PLIST (skipping)"
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: MATCH-${{ matrix.channel }}
          path: dist/MATCH
          if-no-files-found: error

  publish-to-builds-branch:
    name: Commit win/, linux/, mac/ to `builds` branch
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (git state)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Prepare working tree on `builds` branch
        shell: bash
        run: |
          set -e

          # перейти/создать ветку builds
          if git ls-remote --exit-code --heads origin builds >/dev/null 2>&1; then
            git checkout builds
          else
            git checkout --orphan builds
            git rm -rf . 2>/dev/null || true
          fi

          # очистить и создать корневые папки
          rm -rf win linux mac
          mkdir -p win linux mac

          # разложить артефакты в корень ветки
          [ -d "_artifacts/MATCH-win" ]   && cp -a _artifacts/MATCH-win/.   win/
          [ -d "_artifacts/MATCH-linux" ] && cp -a _artifacts/MATCH-linux/. linux/
          [ -d "_artifacts/MATCH-mac" ]   && cp -a _artifacts/MATCH-mac/.   mac/

          echo "Root of builds branch:" && ls -la
          echo "win/:   " && ls -la win   || true
          echo "linux/: " && ls -la linux || true
          echo "mac/:   " && ls -la mac   || true

      - name: Commit & push to `builds`
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: github-actions@github.com
        shell: bash
        run: |
          set -e
          git add win linux mac
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping."
            exit 0
          fi
          git commit -m "ci: update win/, linux/, mac/ (${{ needs.build.outputs.version || '' }}) [skip ci]" || \
          git commit -m "ci: update win/, linux/, mac/ [skip ci]"
          git push origin builds
