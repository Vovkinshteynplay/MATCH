name: Build (Win/Linux/macOS) ➜ commit to `builds` branch

on:
  workflow_dispatch:
  push:
    branches: ["main"]        # автозапуск при пушах в main
    paths-ignore:
      - "builds/**"           # не реагировать на изменения внутри builds/

permissions:
  contents: write             # нужно, чтобы пушить в repo

jobs:
  build:
    name: Build ${{ matrix.channel }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            channel: win
          - os: ubuntu-latest
            channel: linux
          - os: macos-14
            channel: mac
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pygame pyinstaller
          # Для Windows: если иконка указывается PNG, PyInstaller конвертирует через Pillow:
          if [ "${{ runner.os }}" = "Windows" ]; then pip install pillow; fi
        shell: bash

      - name: Build via tools/build.py
        run: |
          python tools/build.py --name MATCH --version "${{ github.ref_name || github.sha }}" --clean

      - name: Sanity print
        run: |
          echo "Built on ${{ runner.os }}"
          ls -la dist
          ls -la dist/MATCH || true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: MATCH-${{ matrix.channel }}
          path: dist/MATCH
          if-no-files-found: error

  publish-to-builds-branch:
    name: Commit builds/ to `builds` branch
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch (for git state)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Prepare working tree on `builds` branch
        run: |
          set -e
          # Проверим, существует ли удалённая ветка builds
          if git ls-remote --exit-code --heads origin builds >/dev/null 2>&1; then
            git checkout builds
          else
            # Создаём орфан-ветку с нуля
            git checkout --orphan builds
            # Удалим всё из индекса и рабочей директории (только рабочее дерево)
            git rm -rf . 2>/dev/null || true
          fi

          # Очистим и пересоздадим целевые папки
          rm -rf builds
          mkdir -p builds/win builds/linux builds/mac

          # Разложим артефакты по папкам
          # Внутри _artifacts/ будут папки MATCH-win, MATCH-linux, MATCH-mac
          if [ -d "_artifacts/MATCH-win" ];   then cp -a _artifacts/MATCH-win/.   builds/win/;   fi
          if [ -d "_artifacts/MATCH-linux" ]; then cp -a _artifacts/MATCH-linux/. builds/linux/; fi
          if [ -d "_artifacts/MATCH-mac" ];   then cp -a _artifacts/MATCH-mac/.   builds/mac/;   fi

          # --- Если нужно оставить ТОЛЬКО исполняемый файл и _internal, раскомментируй блоки ниже ---
          # Windows (оставить MATCH.exe и каталог _internal; подчистить остальное на верхнем уровне)
          # if [ -d builds/win ]; then
          #   find builds/win -maxdepth 1 -type f ! -name 'MATCH.exe' -delete
          #   find builds/win -mindepth 1 -maxdepth 1 -type d ! -name '_internal' -exec rm -rf {} +
          # fi
          #
          # Linux (оставить бинарь MATCH и каталог _internal, если он есть)
          # if [ -d builds/linux ]; then
          #   find builds/linux -maxdepth 1 -type f ! -name 'MATCH' -delete
          #   find builds/linux -mindepth 1 -maxdepth 1 -type d ! -name '_internal' -exec rm -rf {} +
          # fi
          #
          # macOS (оставить только MATCH.app)
          # if [ -d builds/mac ]; then
          #   find builds/mac -mindepth 1 -maxdepth 1 ! -name 'MATCH.app' -exec rm -rf {} +
          # fi

          # Статус
          echo "Tree on builds branch:"
          ls -la
          echo "builds/win:"
          ls -la builds/win || true
          echo "builds/linux:"
          ls -la builds/linux || true
          echo "builds/mac:"
          ls -la builds/mac || true

      - name: Commit & push to `builds`
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: github-actions@github.com
        run: |
          set -e
          git add builds
          if git diff --cached --quiet; then
            echo "No changes to commit in builds/, skipping."
            exit 0
          fi
          git commit -m "ci: update builds/ ($(date -u +'%Y-%m-%dT%H:%M:%SZ')) [skip ci]"
          git push origin builds
